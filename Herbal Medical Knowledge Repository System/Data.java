
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Hunter961103
 */
public class Data extends javax.swing.JFrame {
    TextFile textfile = new TextFile();
    HerbNode herbhead = null;
    DiseaseNode diseasehead = null;
    TreatmentNode treatmenthead = null;
    boolean admin;
    String usertypeopt , searchtypeopt;
    DefaultListModel model = new DefaultListModel();
    String target;
    
    /**
     * Creates new form Herb
     */
    public Data() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    public Data(boolean admin , String usertypeopt , String searchtypeopt , String search) {
        initComponents();
        setLocationRelativeTo(null);
        title.setText(searchtypeopt);
        this.admin = admin;
        this.usertypeopt = usertypeopt;
        this.searchtypeopt = searchtypeopt;
        if(!admin) {
            add.setVisible(false);
            delete.setVisible(false);
        }
        datalist.setModel(model);
        switch(searchtypeopt) {
            case "Herb" :
                herbhead = textfile.ReadHerb();
                HerbNode current1 = herbhead;
                while(current1 != null) {
                    if(search.equals("") || current1.getName().toString().contains(search))
                        model.addElement(current1.getName().toString());
                    current1 = current1.getLink();
                }
                break;
            case "Disease" :
                diseasehead = textfile.ReadDisease();
                DiseaseNode current2 = diseasehead;
                while(current2 != null) {
                    if(search.equals("") || current2.getName().toString().contains(search))
                        model.addElement(current2.getName().toString());
                    current2 = current2.getLink();
                }
                break;
            case "Treatment" :
                treatmenthead = textfile.ReadTreatment();
                TreatmentNode current3 = treatmenthead;
                while(current3 != null) {
                    if(search.equals("") && current3.getName().toString().contains(search))
                        model.addElement(current3.getName().toString());
                    current3 = current3.getLink();
                }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sorttype = new javax.swing.ButtonGroup();
        title = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();
        scrollpane = new javax.swing.JScrollPane();
        datalist = new javax.swing.JList<>();
        sortby = new javax.swing.JLabel();
        AtoZ = new javax.swing.JRadioButton();
        ZtoA = new javax.swing.JRadioButton();
        back = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        add = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Herbal Medical Knowledge Repository System");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Data");
        title.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 11, 357, -1));

        panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        datalist.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        datalist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                datalistMouseClicked(evt);
            }
        });
        scrollpane.setViewportView(datalist);

        sortby.setText("Sort by :");

        sorttype.add(AtoZ);
        AtoZ.setText("Name A-Z");
        AtoZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtoZActionPerformed(evt);
            }
        });

        sorttype.add(ZtoA);
        ZtoA.setText("Name Z-A");
        ZtoA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZtoAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sortby)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AtoZ)
                .addGap(18, 18, 18)
                .addComponent(ZtoA)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(scrollpane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortby)
                    .addComponent(AtoZ)
                    .addComponent(ZtoA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
        );

        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 50, -1, -1));

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 257, -1, -1));

        delete.setText("Delete");
        delete.setEnabled(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(254, 257, -1, -1));

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        getContentPane().add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 257, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Data Background.jpg"))); // NOI18N
        background.setText("jLabel1");
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 290));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        close();
        Search frame1 = new Search(usertypeopt , admin);
        frame1.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void datalistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datalistMouseClicked
        if(evt.getClickCount() == 1) {
            target = datalist.getSelectedValue();
            if(target != null)
                delete.setEnabled(true);
        }
        if(evt.getClickCount() == 2) {
            switch(searchtypeopt) {
                case "Herb" :
                    HerbNode current1 = herbhead;
                    while(current1 != null) {
                        if(current1.getName().toString().equals(target)) {
                            close();
                            Information frame2 = new Information(admin , usertypeopt , searchtypeopt , current1 , target);
                            frame2.setVisible(true);
                        }
                        current1 = current1.getLink();
                    }
                    break;
                case "Disease" :
                    DiseaseNode current2 = diseasehead;
                    while(current2 != null) {
                        if(current2.getName().toString().equals(target)) {
                            close();
                            Information frame2 = new Information(admin , usertypeopt , searchtypeopt , current2 , target);
                            frame2.setVisible(true);
                        }
                        current2 = current2.getLink();
                    }
                    break;
                case "Treatment" :
                    TreatmentNode current3 = treatmenthead;
                    while(current3 != null) {
                        if(current3.getName().toString().equals(target)) {
                            close();
                            Information frame2 = new Information(admin , usertypeopt , searchtypeopt , current3 , target);
                            frame2.setVisible(true);
                        }
                        current3 = current3.getLink();
                    }
                    break;
            }
        }
    }//GEN-LAST:event_datalistMouseClicked

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        boolean add = true;
        close();
        Information frame2 = new Information(admin , usertypeopt , searchtypeopt , add);
        frame2.setVisible(true);
    }//GEN-LAST:event_addActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        model.removeElement(target);
        switch(searchtypeopt) {
            case "Herb" :
                if(herbhead.getName().toString().equals(target))
                    herbhead = herbhead.getLink();
                else {
                    HerbNode before = herbhead;
                    HerbNode current = herbhead;
                    while(!current.getName().toString().equals(target) && current.getLink() != null) {
                        before = current;
                        current = current.getLink();
                    }
                    if(current.getName().toString().equals(target))
                        before.setLink(current.getLink());
                }
                diseasehead = textfile.ReadDisease();
                DiseaseNode dcurrent = diseasehead;
                while(dcurrent != null) {
                    if(dcurrent.getRelatedh().toString().equals(target)) {
                        dcurrent.setRelatedh("No related data");
                        DiseaseNode diseasenode = new DiseaseNode(dcurrent.getName().toString() , dcurrent.getDescription().toString() , dcurrent.getRelatedh().toString() , dcurrent.getRelatedtm().toString());
                        if(diseasehead == null)
                            diseasehead = diseasenode;
                        else {
                            DiseaseNode current = diseasehead;
                            while(current.getLink() != null)
                                current = current.getLink();
                            current.setLink(diseasenode);
                        }
                        if(diseasehead.getName().toString().equals(dcurrent.getName().toString()))
                            diseasehead = diseasehead.getLink();
                        else {
                            DiseaseNode before = diseasehead;
                            DiseaseNode current = diseasehead;
                            while(!current.getName().toString().equals(dcurrent.getName().toString()) && current.getLink() != null) {
                                before = current;
                                current = current.getLink();
                            }
                            if(current.getName().toString().equals(dcurrent.getName().toString()))
                                before.setLink(current.getLink());
                        }
                    }
                    dcurrent = dcurrent.getLink();
                }
                textfile.SaveDisease(diseasehead);
                treatmenthead = textfile.ReadTreatment();
                TreatmentNode tcurrent = treatmenthead;
                while(tcurrent != null) {
                    if(tcurrent.getRelatedh().toString().equals(target)) {
                        tcurrent.setRelatedh("No related data");
                        TreatmentNode treatmentnode = new TreatmentNode(tcurrent.getName().toString() , tcurrent.getType().toString() , tcurrent.getDescription().toString() , tcurrent.getRelatedh().toString() , tcurrent.getRelatedds().toString());
                        if(treatmenthead == null)
                            treatmenthead = treatmentnode;
                        else {
                            TreatmentNode current = treatmenthead;
                            while(current.getLink() != null)
                                current = current.getLink();
                            current.setLink(treatmentnode);
                        }
                        if(treatmenthead.getName().toString().equals(tcurrent.getName().toString()))
                            treatmenthead = treatmenthead.getLink();
                        else {
                            TreatmentNode before = treatmenthead;
                            TreatmentNode current = treatmenthead;
                            while(!current.getName().toString().equals(tcurrent.getName().toString()) && current.getLink() != null) {
                                before = current;
                                current = current.getLink();
                            }
                            if(current.getName().toString().equals(tcurrent.getName().toString()))
                                before.setLink(current.getLink());
                        }
                    }
                    tcurrent = tcurrent.getLink();
                }
                textfile.SaveTreatment(treatmenthead);
                textfile.SaveHerb(herbhead);
                JOptionPane.showMessageDialog(null , "Herb is deleted successfully");
                delete.setEnabled(false);
                break;
            case "Disease" :
                if(diseasehead.getName().toString().equals(target))
                    diseasehead = diseasehead.getLink();
                else {
                    DiseaseNode before = diseasehead;
                    DiseaseNode current = diseasehead;
                    while(!current.getName().toString().equals(target) && current.getLink() != null) {
                        before = current;
                        current = current.getLink();
                    }
                    if(current.getName().toString().equals(target))
                        before.setLink(current.getLink());
                }
                herbhead = textfile.ReadHerb();
                HerbNode hcurrent = herbhead;
                while(hcurrent != null) {
                    if(hcurrent.getRelatedds().toString().equals(target)) {
                        hcurrent.setRelatedds("No related data");
                        HerbNode herbnode = new HerbNode(hcurrent.getName().toString() , hcurrent.getType().toString() , hcurrent.getImage().toString() , hcurrent.getDescription().toString() , hcurrent.getRelatedds().toString() , hcurrent.getRelatedtm().toString());
                        if(herbhead == null)
                            herbhead = herbnode;
                        else {
                            HerbNode current = herbhead;
                            while(current.getLink() != null)
                                current = current.getLink();
                            current.setLink(herbnode);
                        }
                        if(herbhead.getName().toString().equals(hcurrent.getName().toString()))
                            herbhead = herbhead.getLink();
                        else {
                            HerbNode before = herbhead;
                            HerbNode current = herbhead;
                            while(!current.getName().toString().equals(hcurrent.getName().toString()) && current.getLink() != null) {
                                before = current;
                                current = current.getLink();
                            }
                            if(current.getName().toString().equals(hcurrent.getName().toString()))
                                before.setLink(current.getLink());
                        }
                    }
                    hcurrent = hcurrent.getLink();
                }
                textfile.SaveHerb(herbhead);
                treatmenthead = textfile.ReadTreatment();
                tcurrent = treatmenthead;
                while(tcurrent != null) {
                    if(tcurrent.getRelatedh().toString().equals(target)) {
                        tcurrent.setRelatedh("No related data");
                        TreatmentNode treatmentnode = new TreatmentNode(tcurrent.getName().toString() , tcurrent.getType().toString() , tcurrent.getDescription().toString() , tcurrent.getRelatedh().toString() , tcurrent.getRelatedds().toString());
                        if(treatmenthead == null)
                            treatmenthead = treatmentnode;
                        else {
                            TreatmentNode current = treatmenthead;
                            while(current.getLink() != null)
                                current = current.getLink();
                            current.setLink(treatmentnode);
                        }
                        if(treatmenthead.getName().toString().equals(tcurrent.getName().toString()))
                            treatmenthead = treatmenthead.getLink();
                        else {
                            TreatmentNode before = treatmenthead;
                            TreatmentNode current = treatmenthead;
                            while(!current.getName().toString().equals(tcurrent.getName().toString()) && current.getLink() != null) {
                                before = current;
                                current = current.getLink();
                            }
                            if(current.getName().toString().equals(tcurrent.getName().toString()))
                                before.setLink(current.getLink());
                        }
                    }
                    tcurrent = tcurrent.getLink();
                }
                textfile.SaveTreatment(treatmenthead);
                textfile.SaveDisease(diseasehead);
                JOptionPane.showMessageDialog(null , "Disease is deleted successfully");
                delete.setEnabled(false);
                break;
            case "Treatment" :
                if(treatmenthead.getName().toString().equals(target))
                    treatmenthead = treatmenthead.getLink();
                else {
                    TreatmentNode before = treatmenthead;
                    TreatmentNode current = treatmenthead;
                    while(!current.getName().toString().equals(target) && current.getLink() != null) {
                        before = current;
                        current = current.getLink();
                    }
                    if(current.getName().toString().equals(target))
                        before.setLink(current.getLink());
                }
                herbhead = textfile.ReadHerb();
                hcurrent = herbhead;
                while(hcurrent != null) {
                    if(hcurrent.getRelatedds().toString().equals(target)) {
                        hcurrent.setRelatedds("No related data");
                        HerbNode herbnode = new HerbNode(hcurrent.getName().toString() , hcurrent.getType().toString() , hcurrent.getImage().toString() , hcurrent.getDescription().toString() , hcurrent.getRelatedds().toString() , hcurrent.getRelatedtm().toString());
                        if(herbhead == null)
                            herbhead = herbnode;
                        else {
                            HerbNode current = herbhead;
                            while(current.getLink() != null)
                                current = current.getLink();
                            current.setLink(herbnode);
                        }
                        if(herbhead.getName().toString().equals(hcurrent.getName().toString()))
                            herbhead = herbhead.getLink();
                        else {
                            HerbNode before = herbhead;
                            HerbNode current = herbhead;
                            while(!current.getName().toString().equals(hcurrent.getName().toString()) && current.getLink() != null) {
                                before = current;
                                current = current.getLink();
                            }
                            if(current.getName().toString().equals(hcurrent.getName().toString()))
                                before.setLink(current.getLink());
                        }
                    }
                    hcurrent = hcurrent.getLink();
                }
                textfile.SaveHerb(herbhead);
                diseasehead = textfile.ReadDisease();
                dcurrent = diseasehead;
                while(dcurrent != null) {
                    if(dcurrent.getRelatedh().toString().equals(target)) {
                        dcurrent.setRelatedh("No related data");
                        DiseaseNode diseasenode = new DiseaseNode(dcurrent.getName().toString() , dcurrent.getDescription().toString() , dcurrent.getRelatedh().toString() , dcurrent.getRelatedtm().toString());
                        if(diseasehead == null)
                            diseasehead = diseasenode;
                        else {
                            DiseaseNode current = diseasehead;
                            while(current.getLink() != null)
                                current = current.getLink();
                            current.setLink(diseasenode);
                        }
                        if(diseasehead.getName().toString().equals(dcurrent.getName().toString()))
                            diseasehead = diseasehead.getLink();
                        else {
                            DiseaseNode before = diseasehead;
                            DiseaseNode current = diseasehead;
                            while(!current.getName().toString().equals(dcurrent.getName().toString()) && current.getLink() != null) {
                                before = current;
                                current = current.getLink();
                            }
                            if(current.getName().toString().equals(dcurrent.getName().toString()))
                                before.setLink(current.getLink());
                        }
                    }
                    dcurrent = dcurrent.getLink();
                }
                textfile.SaveDisease(diseasehead);
                textfile.SaveTreatment(treatmenthead);
                JOptionPane.showMessageDialog(null , "Treatment is deleted successfully");
                delete.setEnabled(false);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void AtoZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtoZActionPerformed
        int y;
        for(int x = 0; x < model.getSize(); x++) {
            String temp = model.getElementAt(x).toString();
            for(y = x; y > 0 && temp.compareToIgnoreCase(model.getElementAt(y - 1).toString()) < 0; y--)
                model.setElementAt(model.getElementAt(y - 1).toString() , y);
            model.setElementAt(temp , y);
        }
    }//GEN-LAST:event_AtoZActionPerformed

    private void ZtoAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZtoAActionPerformed
        int y;
        for(int x = 0; x < model.getSize(); x++) {
            String temp = model.getElementAt(x).toString();
            for(y = x; y > 0 && temp.compareToIgnoreCase(model.getElementAt(y - 1).toString()) > 0; y--)
                model.setElementAt(model.getElementAt(y - 1).toString() , y);
            model.setElementAt(temp , y);
        }
    }//GEN-LAST:event_ZtoAActionPerformed

    public void close() {
        WindowEvent close = new WindowEvent(this , WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(close);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Data().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton AtoZ;
    private javax.swing.JRadioButton ZtoA;
    private javax.swing.JButton add;
    private javax.swing.JButton back;
    private javax.swing.JLabel background;
    private javax.swing.JList<String> datalist;
    private javax.swing.JButton delete;
    private javax.swing.JPanel panel;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JLabel sortby;
    private javax.swing.ButtonGroup sorttype;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
